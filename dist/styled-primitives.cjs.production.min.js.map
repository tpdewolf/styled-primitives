{"version":3,"file":"styled-primitives.cjs.production.min.js","sources":["../src/config.ts","../src/Box.tsx","../src/Column.tsx","../src/Flex.tsx","../src/Space.tsx","../src/Row.tsx","../src/Grid.tsx","../src/Pseudobox.tsx"],"sourcesContent":["import { Config, get, system } from 'styled-system'\n\nconst isNumber = (n: any) => typeof n === 'number' && !isNaN(n)\nconst getWidth = (n: any, scale: any) =>\n  get(scale, n, !isNumber(n) || n > 1 ? n : n * 100 + '%')\n\nexport const config: Config = {\n  roundedTop: {\n    properties: ['borderTopLeftRadius', 'borderTopRightRadius'],\n    scale: 'radii',\n  },\n  roundedBottom: {\n    properties: ['borderBottomLeftRadius', 'borderBottomRightRadius'],\n    scale: 'radii',\n  },\n  roundedLeft: {\n    properties: ['borderTopLeftRadius', 'borderBottomLeftRadius'],\n    scale: 'radii',\n  },\n  roundedRight: {\n    properties: ['borderTopRightRadius', 'borderBottomRightRadius'],\n    scale: 'radii',\n  },\n  roundedTopRight: {\n    property: 'borderTopRightRadius',\n    scale: 'radii',\n  },\n  roundedTopLeft: {\n    property: 'borderTopLeftRadius',\n    scale: 'radii',\n  },\n  roundedBottomRight: {\n    property: 'borderBottomRightRadius',\n    scale: 'radii',\n  },\n  roundedBottomLeft: {\n    property: 'borderBottomLeftRadius',\n    scale: 'radii',\n  },\n  rounded: {\n    property: 'borderRadius',\n    scale: 'radii',\n  },\n  d: {\n    property: 'display',\n  },\n  w: {\n    property: 'width',\n    scale: 'sizes',\n    transform: getWidth,\n  },\n  minW: {\n    property: 'minWidth',\n    scale: 'sizes',\n  },\n  maxW: {\n    property: 'maxWidth',\n    scale: 'sizes',\n  },\n  h: {\n    property: 'height',\n    scale: 'sizes',\n  },\n  minH: {\n    property: 'minHeight',\n    scale: 'sizes',\n  },\n  maxH: {\n    property: 'maxHeight',\n    scale: 'sizes',\n  },\n  bgImg: {\n    property: 'backgroundImage',\n  },\n  bgImage: {\n    property: 'backgroundImage',\n  },\n  bgSize: {\n    property: 'backgroundSize',\n  },\n  bgPos: {\n    property: 'backgroundPosition',\n  },\n  bgRepeat: {\n    property: 'backgroundRepeat',\n  },\n  pos: {\n    property: 'position',\n  },\n  flexDir: {\n    property: 'flexDirection',\n  },\n  shadow: {\n    property: 'boxShadow',\n    scale: 'shadows',\n  },\n  textDecoration: { property: 'textDecoration' },\n  overflowX: true,\n  overflowY: true,\n  textTransform: true,\n  animation: true,\n  appearance: true,\n  transform: true,\n  transformOrigin: true,\n  visibility: true,\n  whiteSpace: true,\n  userSelect: true,\n  pointerEvents: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  boxSizing: true,\n  cursor: true,\n  resize: true,\n  transition: true,\n  listStyleType: true,\n  listStylePosition: true,\n  listStyleImage: true,\n  fill: {\n    property: 'fill',\n    scale: 'colors',\n  },\n  stroke: {\n    property: 'stroke',\n    scale: 'colors',\n  },\n  objectFit: true,\n  objectPosition: true,\n  backgroundAttachment: {\n    property: 'backgroundAttachment',\n  },\n  outline: true,\n  float: true,\n  willChange: true,\n}\n\nconfig.bgAttachment = config.backgroundAttachment\nconfig.textDecor = config.textDecoration\nconfig.listStylePos = config.listStylePosition\nconfig.listStyleImg = config.listStyleImage\n\nconst extraConfig = system(config)\n\nexport default extraConfig\n\n// Create an issue on @styled-system/css to allow custom alias to be passed to the `css` function\n\n// Transform the custom alias to a format that styled-system CSS supports\nconst transformAlias = (prop: string, propValue: any) => {\n  const configKeys = Object.keys(config)\n  const result: any = {}\n\n  if (configKeys.includes(prop)) {\n    const { properties, property } = config[prop] as any\n    if (properties) {\n      properties.forEach((_cssProp: any) => (result[_cssProp] = propValue))\n    }\n    if (property) {\n      result[property] = propValue\n    }\n    if (config[prop] === true) {\n      result[prop] = propValue\n    }\n  } else {\n    result[prop] = propValue\n  }\n  return result\n}\n\nexport const transformAliasProps = (props: any) => {\n  let result = {}\n  for (const prop in props) {\n    if (typeof props[prop] === 'object' && !Array.isArray(props[prop])) {\n      result = { ...result, [prop]: transformAliasProps(props[prop]) }\n    } else {\n      result = { ...result, ...transformAlias(prop, props[prop]) }\n    }\n  }\n  return result\n}\n","import styled, { DefaultTheme } from 'styled-components'\nimport {\n  background,\n  BackgroundImageProps,\n  BackgroundPositionProps,\n  BackgroundProps,\n  BackgroundSizeProps,\n  border,\n  BorderColorProps,\n  BorderRadiusProps,\n  BordersProps,\n  BoxShadowProps,\n  color,\n  ColorProps,\n  compose,\n  DisplayProps,\n  flexbox,\n  FlexboxProps,\n  FlexDirectionProps,\n  FontSizeProps,\n  FontWeightProps,\n  grid,\n  GridProps,\n  HeightProps,\n  layout,\n  LayoutProps,\n  LetterSpacingProps,\n  LineHeightProps,\n  MaxHeightProps,\n  MaxWidthProps,\n  MinHeightProps,\n  MinWidthProps,\n  OpacityProps,\n  OverflowProps,\n  position,\n  PositionProps,\n  ResponsiveValue,\n  shadow,\n  ShadowProps,\n  space,\n  SpaceProps,\n  typography,\n  TypographyProps as SSTypographyProps,\n  WidthProps,\n} from 'styled-system'\nimport extraConfig from './config'\n\ntype CSS = React.CSSProperties\n\ntype borderRadius = BorderRadiusProps['borderRadius']\ntype borderColor = BorderColorProps['borderColor']\n\nexport interface CustomConfig {\n  // Custom borderRadius alias\n  rounded?: borderRadius\n  roundedTop?: borderRadius\n  roundedBottom?: borderRadius\n  roundedLeft?: borderRadius\n  roundedRight?: borderRadius\n  roundedTopRight?: borderRadius\n  roundedTopLeft?: borderRadius\n  roundedBottomRight?: borderRadius\n  roundedBottomLeft?: borderRadius\n\n  // Custom borderColor alias\n  borderBottomColor?: borderColor\n  borderTopColor?: borderColor\n  borderRightColor?: borderColor\n  borderLeftColor?: borderColor\n\n  // Custom width alias\n  w?: WidthProps['width']\n  minW?: MinWidthProps['minWidth']\n  maxW?: MaxWidthProps['maxWidth']\n\n  // Custom height alias\n  h?: HeightProps['height']\n  minH?: MinHeightProps['minHeight']\n  maxH?: MaxHeightProps['maxHeight']\n\n  // Custom display alias\n  d?: DisplayProps['display']\n\n  // Custom background alias\n  backgroundAttachment?: ResponsiveValue<CSS['backgroundAttachment']>\n  bgImg?: BackgroundImageProps['backgroundImage']\n  bgImage?: BackgroundImageProps['backgroundImage']\n  bgSize?: BackgroundSizeProps['backgroundSize']\n  bgPos?: BackgroundPositionProps['backgroundPosition']\n  pos?: PositionProps['position']\n  flexDir?: FlexDirectionProps['flexDirection']\n\n  // CSS properties\n  textDecoration?: ResponsiveValue<CSS['textDecoration']>\n  textDecor?: ResponsiveValue<CSS['textDecoration']>\n  textTransform?: ResponsiveValue<CSS['textTransform']>\n  overflowX?: OverflowProps['overflow']\n  overflowY?: OverflowProps['overflow']\n  appearance?: ResponsiveValue<CSS['appearance']>\n  transform?: ResponsiveValue<CSS['transform']>\n  transformOrigin?: ResponsiveValue<CSS['transformOrigin']>\n  animation?: ResponsiveValue<CSS['animation']>\n  userSelect?: ResponsiveValue<CSS['userSelect']>\n  pointerEvents?: ResponsiveValue<CSS['pointerEvents']>\n  boxSizing?: ResponsiveValue<CSS['boxSizing']>\n  cursor?: ResponsiveValue<CSS['cursor']>\n  resize?: ResponsiveValue<CSS['resize']>\n  transition?: ResponsiveValue<CSS['transition']>\n  objectFit?: ResponsiveValue<CSS['objectFit']>\n  objectPosition?: ResponsiveValue<CSS['objectPosition']>\n  visibility?: ResponsiveValue<CSS['visibility']>\n\n  // Ellipsis alias\n  wordBreak?: ResponsiveValue<CSS['wordBreak']>\n  overflowWrap?: ResponsiveValue<CSS['overflowWrap']>\n  whiteSpace?: ResponsiveValue<CSS['whiteSpace']>\n\n  // SVG color properties\n  fill?: ColorProps['color']\n  stroke?: ColorProps['color']\n\n  bgAttachment?: ResponsiveValue<CSS['backgroundAttachment']>\n  shadow?: BoxShadowProps['boxShadow']\n\n  // List properties\n  listStyleType?: ResponsiveValue<CSS['listStyleType']>\n  listStylePosition?: ResponsiveValue<CSS['listStylePosition']>\n  listStyleImage?: ResponsiveValue<CSS['listStyleImage']>\n  listStyleImg?: ResponsiveValue<CSS['listStyleImage']>\n  listStylePos?: ResponsiveValue<CSS['listStylePosition']>\n\n  // Outline prop\n  outline?: ResponsiveValue<CSS['outline']>\n  float?: ResponsiveValue<CSS['float']>\n  willChange?: ResponsiveValue<CSS['willChange']>\n\n  // Border Width props\n  borderTopWidth?: ResponsiveValue<CSS['borderTopWidth']>\n  borderBottomWidth?: ResponsiveValue<CSS['borderBottomWidth']>\n  borderLeftWidth?: ResponsiveValue<CSS['borderLeftWidth']>\n  borderRightWidth?: ResponsiveValue<CSS['borderRightWidth']>\n}\n\ntype FontSizes = keyof DefaultTheme['fontSizes']\n\nexport interface FontSize {\n  fontSize?: ResponsiveValue<FontSizes> | FontSizeProps['fontSize']\n}\n\ntype FontWeights = keyof DefaultTheme['fontWeights']\n\nexport interface FontWeight {\n  fontWeight?: ResponsiveValue<FontWeights> | FontWeightProps['fontWeight']\n}\n\ntype LineHeights = keyof DefaultTheme['lineHeights']\n\nexport interface LineHeight {\n  lineHeight?: ResponsiveValue<LineHeights> | LineHeightProps['lineHeight']\n}\n\ntype LetterSpacings = keyof DefaultTheme['letterSpacings']\n\nexport interface LetterSpacing {\n  letterSpacing?:\n    | ResponsiveValue<LetterSpacings>\n    | LetterSpacingProps['letterSpacing']\n}\n\ntype TypographyProps = Omit<\n  SSTypographyProps,\n  'fontWeight' | 'lineHeight' | 'fontSize' | 'letterSpacing'\n>\n\nexport interface Truncated {\n  /**\n   * If `true`, the text will be truncated\n   */\n  isTruncated?: boolean\n}\n\ntype StyledSystemProps = LayoutProps &\n  ColorProps &\n  SpaceProps &\n  BordersProps &\n  BackgroundProps &\n  PositionProps &\n  FlexboxProps &\n  ShadowProps &\n  GridProps &\n  OpacityProps &\n  OverflowProps\n\ntype ModifiedStyledSystemProps = TypographyProps &\n  FontSize &\n  LetterSpacing &\n  FontWeight &\n  LineHeight &\n  CustomConfig\n\ntype BoxHTMLProps = React.RefAttributes<any> & React.HTMLAttributes<any>\n\nexport type BoxProps = BoxHTMLProps &\n  StyledSystemProps &\n  ModifiedStyledSystemProps &\n  Truncated\n\nexport const truncate = (props: BoxProps) => {\n  if (props.isTruncated) {\n    return {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    }\n  }\n\n  return null\n}\n\nexport const boxStyles = compose(\n  layout,\n  color,\n  space,\n  background,\n  border,\n  grid,\n  position,\n  shadow,\n  typography,\n  flexbox,\n  extraConfig\n)\n\nexport const Box = styled.div<BoxProps>(\n  {\n    boxSizing: 'border-box',\n  },\n  boxStyles\n)\n\nBox.displayName = 'Box'\n","import styled from 'styled-components'\nimport { style, compose } from 'styled-system'\nimport { Box, BoxProps } from './Box'\n\ntype ColumnProps = BoxProps & {\n  col?: number | (number | null | string)[]\n  inset?: number | (number | null | string)[]\n}\n\nfunction transformValue(n: string | number) {\n  if (!n || isNaN(n as any)) {\n    return n\n  }\n\n  const cols = Number(n)\n  return (cols / 12) * 100 + '%'\n}\n\nconst inset = style({\n  prop: 'inset',\n  cssProperty: 'marginLeft',\n  transformValue,\n})\n\nconst col = style({\n  prop: 'col',\n  cssProperty: 'width',\n  transformValue,\n})\n\nexport const Column = styled(Box)<ColumnProps>(compose(col, inset))\n\nColumn.displayName = 'Column'\n","import styled from 'styled-components'\nimport { Box, BoxProps } from './Box'\n\nexport type FlexProps = BoxProps\n\nexport const Flex = styled(Box)({})\n\nFlex.defaultProps = {\n  display: 'flex',\n}\n\nFlex.displayName = 'Flex'\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { space, SpaceProps } from 'styled-system'\n\nconst classnames = (...args: any[]) => args.join(' ')\nconst getClassName = (el: any) => (el.props && el.props.className) || ''\n\nexport const StyledChildren: React.FC<{ className?: string } & SpaceProps> = ({\n  className,\n  children,\n}) => {\n  const styledChildren = React.Children.toArray(children)\n    .filter(React.isValidElement)\n    .map((child: any) =>\n      React.cloneElement(child, {\n        className: classnames(getClassName(child), className),\n      })\n    )\n\n  return <>{styledChildren}</>\n}\n\nexport const Space = styled(StyledChildren)(space)\n\nSpace.displayName = 'Space'\n","import * as React from 'react'\nimport { useTheme } from 'styled-components'\nimport { SpaceProps, WidthProps, FlexboxProps } from 'styled-system'\n\nimport { Flex } from './Flex'\nimport { Space } from './Space'\n\ninterface GutterProps {\n  gutter?: any[] | number\n}\n\ntype RowProps = FlexboxProps & GutterProps & SpaceProps & WidthProps\n\nexport const Row: React.FC<RowProps> = ({ gutter, children, ...props }) => {\n  const themeContext = useTheme()\n\n  if (!gutter && themeContext && themeContext.grid) {\n    gutter = themeContext.grid.gutter\n  }\n\n  if (!gutter) {\n    gutter = 15\n  }\n\n  const spacing =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && space / 2)\n      : (gutter as number) / 2\n\n  const mx =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && (space / 2) * -1)\n      : ((gutter as number) / 2) * -1\n\n  return (\n    <Flex mx={mx} flexWrap=\"wrap\" {...props}>\n      <Space px={spacing}>{children}</Space>\n    </Flex>\n  )\n}\n\nRow.displayName = 'Row'\n","import { useTheme } from 'styled-components'\nimport { DisplayProps, HeightProps } from 'styled-system'\nimport { Box } from './Box'\nimport * as React from 'react'\n\nexport interface ThemeGridContainer {\n  maxWidth: number\n  padding: number | any[]\n}\n\nexport interface ThemeGrid {\n  gutter: number | any[]\n  container: ThemeGridContainer\n}\n\nexport const defaultGrid = {\n  gutter: [15, null, 30],\n  container: {\n    maxWidth: 1280,\n    padding: [15, null, 60],\n  },\n}\n\nexport type GridProps = DisplayProps & HeightProps\n\nexport const Grid: React.FC<GridProps> = props => {\n  const themeContext = useTheme()\n\n  return (\n    <Box\n      mx=\"auto\"\n      px={themeContext?.grid?.container?.padding}\n      maxWidth={themeContext?.grid?.container?.maxWidth}\n      {...props}\n    />\n  )\n}\n\nGrid.displayName = 'Grid'\n","/** @jsx jsx */\nimport styled from 'styled-components'\nimport css from '@styled-system/css'\nimport { Box, BoxProps } from './Box'\nimport { transformAliasProps as tx } from './config'\n\ninterface PseudoBoxPropsList {\n  /**\n   * Styles for CSS selector `&:after`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <PseudoBox _after={{content:`\"\"` }}/>\n   * ```\n   */\n  _after?: BoxProps & {\n    content: string\n  }\n  /**\n   * Styles for CSS selector `&:before`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <PseudoBox _before={{content:`\"\"` }}/>\n   * ```\n   */\n  _before?: BoxProps & {\n    content: string\n  }\n  /**\n   * Styles for CSS selector `&:focus`\n   *\n   */\n  _focus?: BoxProps\n  /**\n   * Styles for CSS selector `&:hover`\n   */\n  _hover?: BoxProps\n  /**\n   * Styles for CSS Selector `&:active`\n   */\n  _active?: BoxProps\n  /**\n   * Styles for CSS Selector `&[aria-pressed=true]`\n   * Typically used to style the current \"pressed\" state of toggle buttons\n   */\n  _pressed?: BoxProps\n  /**\n   * Styles to apply when the ARIA attribute `aria-selected` is `true`\n   * - CSS selector `&[aria-selected=true]`\n   */\n  _selected?: BoxProps\n  /**\n   * Styles to apply when a child of this element has received focus\n   * - CSS Selector `&:focus-within`\n   */\n  _focusWithin?: BoxProps\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-invalid` is `true`\n   * - CSS selector `&[aria-invalid=true]`\n   */\n  _invalid?: BoxProps\n  /**\n   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:\n   * - `&[aria-disabled=true]`\n   * - `&:disabled`\n   * - `&:disabled:focus`\n   * - `&:disabled:hover`\n   * - `&:focus[aria-disabled=true]`\n   * - `&:hover[aria-disabled=true]`\n   */\n  _disabled?: BoxProps\n  /**\n   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`\n   * - CSS selector `&[aria-grabbed=true]`\n   */\n  _grabbed?: BoxProps\n  /**\n   * Styles to apply when the ARIA attribute `aria-expanded` is `true`\n   * - CSS selector `&[aria-expanded=true]`\n   */\n  _expanded?: BoxProps\n  /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `true`\n   * - CSS selector `&[aria-checked=true]`\n   */\n  _checked?: BoxProps\n  /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`\n   * - CSS selector `&[aria-checked=mixed]`\n   */\n  _mixed?: BoxProps\n  /**\n   * Styles for CSS Selector `&:nth-child(odd)`\n   */\n  _odd?: BoxProps\n  /**\n   * Styles for CSS Selector `&:nth-child(even)`\n   */\n  _even?: BoxProps\n  /**\n   * Styles for CSS Selector `&:visited`\n   */\n  _visited?: BoxProps\n  /**\n   * Styles for CSS Selector `&:readonly`\n   */\n  _readOnly?: BoxProps\n  /**\n   * Styles for CSS Selector `&:first-of-type`\n   */\n  _first?: BoxProps\n  /**\n   * Styles for CSS Selector `&:last-of-type`\n   */\n  _last?: BoxProps\n  /**\n   * Styles to apply when you hover on a parent that has `role=group`.\n   */\n  _groupHover?: BoxProps\n  /**\n   * Styles for CSS Selector `&:not(:first-of-type)`\n   */\n  _notFirst?: BoxProps\n  /**\n   * Styles for CSS Selector `&:not(:last-of-type)`\n   */\n  _notLast?: BoxProps\n  /**\n   * Styles for CSS Selector `&::placeholder`.\n   * Useful for inputs\n   */\n  _placeholder?: BoxProps\n}\n\nexport type PseudoBoxProps = PseudoBoxPropsList & BoxProps\n\n/**\n * The selectors are based on [WAI-ARIA state properties](https://www.w3.org/WAI/PF/aria-1.1/states_and_properties) and common CSS Selectors\n */\nconst hover = '&:hover'\nconst active = '&:active, &[data-active=true]'\nconst focus = '&:focus'\nconst visited = '&:visited'\nconst even = '&:nth-of-type(even)'\nconst odd = '&:nth-of-type(odd)'\nconst disabled =\n  '&:disabled, &:disabled:focus, &:disabled:hover, &[aria-disabled=true], &[aria-disabled=true]:focus, &[aria-disabled=true]:hover'\nconst checked = '&[aria-checked=true]'\nconst mixed = '&[aria-checked=mixed]'\nconst selected = '&[aria-selected=true]'\nconst invalid = '&[aria-invalid=true]'\nconst pressed = '&[aria-pressed=true]'\nconst readOnly = '&[aria-readonly=true], &[readonly]'\nconst first = '&:first-of-type'\nconst last = '&:last-of-type'\nconst expanded = '&[aria-expanded=true]'\nconst grabbed = '&[aria-grabbed=true]'\nconst notFirst = '&:not(:first-of-type)'\nconst notLast = '&:not(:last-of-type)'\nconst groupHover = '[role=group]:hover &'\n\nexport const PseudoBox = styled(Box)<PseudoBoxProps>(\n  ({\n    _after,\n    _focus,\n    _selected,\n    _focusWithin,\n    _hover,\n    _invalid,\n    _active,\n    _disabled,\n    _grabbed,\n    _pressed,\n    _expanded,\n    _visited,\n    _before,\n    _readOnly,\n    _first,\n    _notFirst,\n    _notLast,\n    _last,\n    _placeholder,\n    _checked,\n    _groupHover,\n    _mixed,\n    _odd,\n    _even,\n  }) => {\n    return css({\n      [hover]: tx(_hover),\n      [focus]: tx(_focus),\n      [active]: tx(_active),\n      [visited]: tx(_visited),\n      [disabled]: tx(_disabled),\n      [selected]: tx(_selected),\n      [invalid]: tx(_invalid),\n      [expanded]: tx(_expanded),\n      [grabbed]: tx(_grabbed),\n      [readOnly]: tx(_readOnly),\n      [first]: tx(_first),\n      [notFirst]: tx(_notFirst),\n      [notLast]: tx(_notLast),\n      [last]: tx(_last),\n      [odd]: tx(_odd),\n      [even]: tx(_even),\n      [mixed]: tx(_mixed),\n      [checked]: tx(_checked),\n      [pressed]: tx(_pressed),\n      [groupHover]: tx(_groupHover),\n      '&:before': tx(_before),\n      '&:after': tx(_after),\n      '&:focus-within': tx(_focusWithin),\n      '&::placeholder': tx(_placeholder),\n    })\n  }\n)\n\nPseudoBox.displayName = 'PseudoBox'\n"],"names":["config","roundedTop","properties","scale","roundedBottom","roundedLeft","roundedRight","roundedTopRight","property","roundedTopLeft","roundedBottomRight","roundedBottomLeft","rounded","d","w","transform","n","get","isNaN","isNumber","minW","maxW","h","minH","maxH","bgImg","bgImage","bgSize","bgPos","bgRepeat","pos","flexDir","shadow","textDecoration","overflowX","overflowY","textTransform","animation","appearance","transformOrigin","visibility","whiteSpace","userSelect","pointerEvents","wordBreak","overflowWrap","textOverflow","boxSizing","cursor","resize","transition","listStyleType","listStylePosition","listStyleImage","fill","stroke","objectFit","objectPosition","backgroundAttachment","outline","willChange","bgAttachment","textDecor","listStylePos","listStyleImg","transformAlias","prop","propValue","configKeys","Object","keys","result","includes","forEach","_cssProp","transformAliasProps","props","Array","isArray","boxStyles","compose","layout","color","space","background","border","grid","position","typography","flexbox","system","Box","styled","div","transformValue","Number","displayName","inset","style","cssProperty","col","Column","Flex","defaultProps","display","classnames","args","join","StyledChildren","className","styledChildren","React","toArray","children","filter","map","child","el","Space","Row","gutter","themeContext","useTheme","spacing","mx","flexWrap","px","Grid","_themeContext$grid","container","_themeContext$grid$co","padding","maxWidth","_themeContext$grid2","_themeContext$grid2$c","PseudoBox","_after","_focus","_selected","_focusWithin","_invalid","_active","_disabled","_grabbed","_pressed","_expanded","_visited","_before","_readOnly","_first","_notFirst","_notLast","_last","_placeholder","_checked","_groupHover","_mixed","_odd","_even","css","tx","_hover","isTruncated","overflow"],"mappings":"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"}