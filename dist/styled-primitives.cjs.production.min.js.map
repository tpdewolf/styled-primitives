{"version":3,"file":"styled-primitives.cjs.production.min.js","sources":["../src/Box.tsx","../src/Card.tsx","../src/Column.tsx","../src/Contain.tsx","../src/Flex.tsx","../src/Text.tsx","../src/Heading.tsx","../src/Space.tsx","../src/Row.tsx","../src/grid.ts"],"sourcesContent":["import { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport {\n  background,\n  BackgroundProps,\n  ButtonStyleProps,\n  color,\n  ColorProps,\n  colorStyle,\n  ColorStyleProps,\n  compose,\n  flexbox,\n  FlexboxProps,\n  layout,\n  LayoutProps,\n  opacity,\n  OpacityProps,\n  position,\n  PositionProps,\n  space,\n  SpaceProps,\n  style,\n  textStyle,\n  TextStyleProps,\n  typography,\n  TypographyProps,\n  variant,\n} from 'styled-system'\n\ntype TextDecorationOption = 'overline' | 'line-through' | 'underline'\ntype TextTransformOption = 'uppercase' | 'lowercase' | 'capitalize'\n\nexport type BoxProps = BackgroundProps &\n  ButtonStyleProps &\n  ColorProps &\n  ColorStyleProps &\n  FlexboxProps &\n  LayoutProps &\n  OpacityProps &\n  PositionProps &\n  SpaceProps &\n  TextStyleProps &\n  TypographyProps & {\n    textDecoration?:\n      | TextDecorationOption\n      | (TextDecorationOption | null | string)[]\n    textTransform?:\n      | TextTransformOption\n      | (TextTransformOption | null | string)[]\n  } & HTMLAttributes<any>\n\nconst textDecoration = style({\n  prop: 'textDecoration',\n  cssProperty: 'textDecoration',\n})\n\nconst textTransform = style({\n  prop: 'textTransform',\n  cssProperty: 'textTransform',\n})\n\nconst boxStyles = compose(\n  background,\n  color,\n  colorStyle,\n  flexbox,\n  layout,\n  opacity,\n  position,\n  space,\n  textStyle,\n  textDecoration,\n  textTransform,\n  typography,\n  variant({\n    prop: 'variant',\n    scale: 'buttons',\n    variants: {\n      primary: {},\n    },\n  })\n)\n\nexport const Box = styled.div<BoxProps>(\n  {\n    boxSizing: 'border-box',\n  },\n  boxStyles\n)\n","import styled from 'styled-components'\nimport {\n  border,\n  BorderProps,\n  ShadowProps,\n  shadow,\n  compose,\n} from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\nexport type CardProps = BoxProps & BorderProps & ShadowProps\n\nexport const Card = styled(Box)<CardProps>(compose(border, shadow))\n","import styled from 'styled-components'\nimport { style, compose } from 'styled-system'\nimport { Box, BoxProps } from './Box'\nimport * as React from 'react'\n\ntype ColumnProps = BoxProps & {\n  col?: number | (number | null | string)[]\n  inset?: number | (number | null | string)[]\n}\n\nfunction transformValue(n: string | number) {\n  if (!n || isNaN(n as any)) {\n    return n\n  }\n\n  const cols = Number(n)\n  return (cols / 12) * 100 + '%'\n}\n\nconst inset = style({\n  prop: 'inset',\n  cssProperty: 'marginLeft',\n  transformValue,\n})\n\nconst col = style({\n  prop: 'col',\n  cssProperty: 'width',\n  transformValue,\n})\n\nexport const Column = styled(Box)<Omit<ColumnProps, 'width'>>(\n  compose(col, inset)\n)\n","import { ThemeContext } from 'styled-components'\nimport { DisplayProps, HeightProps } from 'styled-system'\nimport { Box } from './Box'\nimport { useContext } from 'react'\nimport * as React from 'react'\n\ntype ContainProps = DisplayProps & HeightProps\n\nexport const Contain: React.FC<ContainProps> = props => {\n  const themeContext = useContext(ThemeContext)\n\n  return (\n    <Box\n      mx=\"auto\"\n      px={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.padding\n      }\n      maxWidth={\n        themeContext &&\n        themeContext.grid &&\n        themeContext.grid.container &&\n        themeContext.grid.container.maxWidth\n      }\n      {...props}\n    />\n  )\n}\n\nexport const Grid = Contain\n","import styled from 'styled-components'\nimport { Box, BoxProps } from './Box'\n\nexport type FlexProps = BoxProps\n\nexport const Flex = styled(Box)({})\n\nFlex.defaultProps = {\n  display: 'flex',\n}\n","import { HTMLAttributes } from 'react'\nimport styled, { css } from 'styled-components'\nimport { TypographyProps } from 'styled-system'\n\nimport { Box, BoxProps } from './Box'\n\nexport type TextProps = BoxProps &\n  TypographyProps &\n  HTMLAttributes<HTMLParagraphElement> &\n  HTMLAttributes<HTMLLabelElement> & {\n    as?:\n      | 'p'\n      | 'small'\n      | 'strong'\n      | 'em'\n      | 'span'\n      | 'h1'\n      | 'h2'\n      | 'h3'\n      | 'h4'\n      | 'h5'\n      | 'h6'\n      | 'label'\n    target?: string\n    singleLine?: boolean\n  }\n\nexport const Text = styled(Box)<TextProps>`\n  ${props =>\n    props.singleLine &&\n    css`\n      max-width: 100%;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `}\n`\nexport const Paragraph = styled(Text)({})\n\nText.defaultProps = {\n  as: 'span',\n}\nParagraph.defaultProps = {\n  as: 'p',\n}\n","import { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\n\nimport { Text, TextProps } from './Text'\n\nexport type HeadingProps = TextProps &\n  HTMLAttributes<HTMLHeadingElement> & {\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  }\n\nexport const Heading = styled(Text)<HeadingProps>({})\n\nHeading.defaultProps = {\n  as: 'h2',\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { space, SpaceProps } from 'styled-system'\n\nconst classnames = (...args: any[]) => args.join(' ')\nconst getClassName = (el: any) => (el.props && el.props.className) || ''\n\nexport const StyledChildren: React.FC<{ className?: string } & SpaceProps> = ({\n  className,\n  children,\n}) => {\n  const styledChildren = React.Children.toArray(children).map((child: any) =>\n    React.cloneElement(child, {\n      className: classnames(getClassName(child), className),\n    })\n  )\n  return <>{styledChildren}</>\n}\n\nexport const Space = styled(StyledChildren)(space)\n","import * as React from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { SpaceProps, WidthProps, FlexboxProps } from 'styled-system'\n\nimport { Flex } from './Flex'\nimport { Space } from './Space'\n\ninterface GutterProps {\n  gutter?: any[] | number\n}\n\ntype RowProps = FlexboxProps & GutterProps & SpaceProps & WidthProps\n\nexport const Row: React.FC<RowProps> = ({ gutter, children, ...props }) => {\n  const themeContext = React.useContext(ThemeContext)\n\n  if (!gutter && themeContext && themeContext.grid) {\n    gutter = themeContext.grid.gutter as number\n  }\n\n  if (!gutter) {\n    gutter = 15\n  }\n\n  const spacing =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && space / 2)\n      : (gutter as number) / 2\n\n  const mx =\n    gutter && Array.isArray(gutter)\n      ? gutter.map(space => space && (space / 2) * -1)\n      : ((gutter as number) / 2) * -1\n\n  // const filteredChildren = React.Children.toArray(children).filter(Boolean)\n\n  return (\n    <Flex mx={mx} flexWrap=\"wrap\" {...props}>\n      <Space px={spacing}>{children}</Space>\n    </Flex>\n  )\n}\n","export interface ThemeGridContainer {\n  maxWidth: number\n  padding: number | any[]\n}\n\nexport interface ThemeGrid {\n  gutter: number | any[]\n  container: ThemeGridContainer\n}\n\nexport const defaultGrid = {\n  gutter: [15, null, 30],\n  container: {\n    maxWidth: 1280,\n    padding: [15, null, 60],\n  },\n}\n"],"names":["Box","styled","div","boxSizing","compose","background","color","colorStyle","flexbox","layout","opacity","position","space","textStyle","style","prop","cssProperty","typography","variant","scale","variants","primary","Card","border","shadow","transformValue","n","isNaN","Number","inset","col","Column","Contain","props","themeContext","useContext","ThemeContext","React","mx","px","grid","container","padding","maxWidth","Grid","Flex","defaultProps","display","Text","_templateObject","singleLine","css","Paragraph","as","Heading","classnames","args","join","StyledChildren","className","styledChildren","toArray","children","map","child","el","Space","gutter","spacing","Array","isArray","flexWrap"],"mappings":"8MAmFaA,EAAMC,EAAOC,IACxB,CACEC,UAAW,cAxBGC,UAChBC,aACAC,QACAC,aACAC,UACAC,SACAC,UACAC,WACAC,QACAC,YAnBqBC,QAAM,CAC3BC,KAAM,iBACNC,YAAa,mBAGOF,QAAM,CAC1BC,KAAM,gBACNC,YAAa,kBAebC,aACAC,UAAQ,CACNH,KAAM,UACNI,MAAO,UACPC,SAAU,CACRC,QAAS,QCjEFC,EAAOrB,EAAOD,EAAPC,CAAuBG,UAAQmB,SAAQC,WCH3D,SAASC,EAAeC,UACjBA,GAAKC,MAAMD,GACPA,EAGIE,OAAOF,GACL,GAAM,IAAM,IAG7B,IAAMG,EAAQf,QAAM,CAClBC,KAAM,QACNC,YAAa,aACbS,eAAAA,IAGIK,EAAMhB,QAAM,CAChBC,KAAM,MACNC,YAAa,QACbS,eAAAA,IAGWM,EAAS9B,EAAOD,EAAPC,CACpBG,UAAQ0B,EAAKD,ICxBFG,EAAkC,SAAAC,OACvCC,EAAeC,aAAWC,uBAG9BC,gBAACrC,iBACCsC,GAAG,OACHC,GACEL,GACAA,EAAaM,MACbN,EAAaM,KAAKC,WAClBP,EAAaM,KAAKC,UAAUC,QAE9BC,SACET,GACAA,EAAaM,MACbN,EAAaM,KAAKC,WAClBP,EAAaM,KAAKC,UAAUE,UAE1BV,KAKGW,EAAOZ,EC1BPa,EAAO5C,EAAOD,EAAPC,CAAY,ySAEhC4C,EAAKC,aAAe,CAClBC,QAAS,YCmBEC,EAAO/C,EAAOD,EAAPC,CAAHgD,KACb,SAAAhB,UACAA,EAAMiB,YACNC,cAOSC,EAAYnD,EAAO+C,EAAP/C,CAAa,IAEtC+C,EAAKF,aAAe,CAClBO,GAAI,QAEND,EAAUN,aAAe,CACvBO,GAAI,SCjCOC,EAAUrD,EAAO+C,EAAP/C,CAA2B,IAElDqD,EAAQR,aAAe,CACrBO,GAAI,MCTN,IAAME,EAAa,sCAAIC,2BAAAA,yBAAgBA,EAAKC,KAAK,MAGpCC,EAAgE,gBAC3EC,IAAAA,UAGMC,EAAiBvB,WAAewB,UAFtCC,UAEwDC,KAAI,SAACC,UAC3D3B,eAAmB2B,EAAO,CACxBL,UAAWJ,GARKU,EAQmBD,EARNC,EAAGhC,OAASgC,EAAGhC,MAAM0B,WAAc,IAQrBA,KAR5B,IAACM,YAWb5B,gCAAGuB,IAGCM,EAAQjE,EAAOyD,EAAPzD,CAAuBW,yJCNL,gBAAGuD,IAAAA,OAAQL,IAAAA,SAAa7B,8JACvDC,EAAeG,aAAiBD,iBAEjC+B,GAAUjC,GAAgBA,EAAaM,OAC1C2B,EAASjC,EAAaM,KAAK2B,QAGxBA,IACHA,EAAS,QAGLC,EACJD,GAAUE,MAAMC,QAAQH,GACpBA,EAAOJ,KAAI,SAAAnD,UAASA,GAASA,EAAQ,KACpCuD,EAAoB,EAErB7B,EACJ6B,GAAUE,MAAMC,QAAQH,GACpBA,EAAOJ,KAAI,SAAAnD,UAASA,GAAUA,EAAQ,GAAM,KAC1CuD,EAAoB,GAAM,SAKhC9B,gBAACQ,iBAAKP,GAAIA,EAAIiC,SAAS,QAAWtC,GAChCI,gBAAC6B,GAAM3B,GAAI6B,GAAUN,iFC5BA,CACzBK,OAAQ,CAAC,GAAI,KAAM,IACnB1B,UAAW,CACTE,SAAU,KACVD,QAAS,CAAC,GAAI,KAAM"}